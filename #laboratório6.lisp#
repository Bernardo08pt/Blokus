;;;; laboratorio6.lisp
;;;; Disciplina de IA - 2017 / 2018
;;;; Ficha de Laboratório nº6 - Apoio ao 1º projeto
;;;; Autor: 


;;; Tabuleiros

(defun tabuleiro-vazio (&optional (dimensao 14))
  "Retorna um tabuleiro 14x14 (default) com as casas vazias"
	(make-list dimensao :initial-element (make-list dimensao :initial-element '0))
)

(defun tabuleiro-teste ()
  "Retorna um tabuleiro de teste 14x14 com 4 quadrados 1x1, 1 quadrado 2x2 e 1 cruz"
	'(
	(0 0 0 0 0 0 0 0 0 0 0 0 0 0)
	(1 0 0 0 0 0 0 0 0 0 0 0 0 0)
	(2 0 0 0 0 0 0 0 0 0 0 0 0 0)
	(3 0 0 0 0 0 0 0 0 0 0 0 0 0)
	(4 0 0 0 0 0 0 0 0 0 0 0 0 0)
	(5 0 0 0 0 0 0 0 0 0 0 0 0 0)
	(6 0 0 0 0 0 0 0 0 0 0 0 0 0)
	(7 0 0 0 0 0 0 0 0 0 1 0 0 0)
	(8 0 0 0 0 0 0 0 0 1 1 1 0 0)
	(9 0 0 0 0 0 0 0 0 0 1 0 0 0)
	(10 0 0 0 0 0 0 0 1 1 0 0 0 0)
	(11 0 0 0 0 0 0 0 1 1 0 1 0 0)
	(12 0 0 0 0 0 0 0 0 0 1 0 1 0)
	(13 0 0 0 0 0 0 0 0 0 0 0 0 1)
	)
)


;;; Exercicios
(defun linha (indice tabuleiro)
  (cond
    ((= indice 0) (car tabuleiro))
    (t (linha (- indice 1) (cdr tabuleiro)))
  )
)

(defun coluna (indice tabuleiro)
  (mapcar #'(lambda (linha) (nth indice linha)) tabuleiro) 
)

(defun celula (indiceLinha indiceColuna tabuleiro)
  (linha indiceLinha (coluna indiceColuna tabuleiro))
)

(defun casa-vaziap (indiceLinha indiceColuna tabuleiro)
  (= (celula indiceLinha indiceColuna tabuleiro) 0)
)

(defun verifica-casas-vazias (tabuleiro listaCelulas)
  (mapcar #'(lambda (celula) (casa-vaziap (car celula) (car (cdr celula)) tabuleiro)) listaCelulas)  
)

;;; Função que recebe um índice, uma lista e um valor (por default o valor é 1) e substitui pelo valor pretendido nessa posição
(defun substituir-posicao (indice lista &optional (valor 1))
  (cond
     ((= indice 0) (cons valor (cdr lista)))
     (t (cons (car lista) (substituir-posicao (- indice 1) (cdr lista) valor)))
   )
)

;;; Função que recebe dois índices, o tabuleiro e um valor (por default o valor é 1). A função deverá retornar o tabuleiro com a célula substituída pelo valor pretendido.
(defun substituir (indiceLinha indiceColuna tabuleiro &optional (valor 1))
  (cond
     ((= indiceLinha 0) (cons (substituir-posicao indiceColuna (car tabuleiro) valor) (cdr tabuleiro)))
     (t (cons (car tabuleiro) (substituir (- indiceLinha 1) indiceColuna (cdr tabuleiro) valor)))
   )
)

;;; Função que recebe dois índices e um tipo de peça (quadrado-1x1, quadrado-2x2 ou cruz) e retorna uma lista
; com os pares de índices correspondentes às posições que irá ser colocada a peça. Para todas as peças vamos assumir que os índices
; passados como argumento para a função serão referentes à casa do canto superior esquerdo. No caso da cruz assumimos uma
; mancha de um quadrado 3x3 cujo ponto de referência será o canto superior esquerdo apesar de ser uma casa que não ficará
; preenchida, mas que mantém uniforme o ponto de referência para todas as peças
(defun peca-casas-ocupadas (indiceLinha indiceColuna tipoPeca)
  (cond
     ((eql tipoPeca 'quadrado-1x1) (cons (list indiceLinha indiceColuna) '()))
     ((eql tipoPeca 'quadrado-2x2) (append (peca-casas-ocupadas indiceLinha indiceColuna 'quadrado-1x1)
                                           (peca-casas-ocupadas indiceLinha (+ indiceColuna 1) 'quadrado-1x1)
                                           (peca-casas-ocupadas (+ indiceLinha 1) indiceColuna 'quadrado-1x1)
                                           (peca-casas-ocupadas (+ indiceLinha 1) (+ indiceColuna 1) 'quadrado-1x1)))
     ((eql tipoPeca 'cruz) (append (peca-casas-ocupadas indiceLinha (+ indiceColuna 1) 'quadrado-1x1)
                                   (peca-casas-ocupadas (+ indiceLinha 1) (+ indiceColuna 1) 'quadrado-1x1)
                                   (peca-casas-ocupadas (+ indiceLinha 2) (+ indiceColuna 1) 'quadrado-1x1)
                                   (peca-casas-ocupadas (+ indiceLinha 1) indiceColuna 'quadrado-1x1)
                                   (peca-casas-ocupadas (+ indiceLinha 1) (+ indiceColuna 2) 'quadrado-1x1)))
     ((eql tipoPeca 'barra) (append (peca-casas-ocupadas indiceLinha indiceColuna 'quadrado-1x1)
                                    (peca-casas-ocupadas indiceLinha (+ indiceColuna 1) 'quadrado-1x1)
                                    (peca-casas-ocupadas indiceLinha (+ indiceColuna 2) 'quadrado-1x1)))
     ((eql tipoPeca 't-invertido) (append (peca-casas-ocupadas indiceLinha (+ indiceColuna 1) 'quadrado-1x1)
                                          (peca-casas-ocupadas (+ indiceLinha 1) (+ indiceColuna 1) 'quadrado-1x1)
                                          (peca-casas-ocupadas (+ indiceLinha 1) indiceColuna 'quadrado-1x1)
                                          (peca-casas-ocupadas (+ indiceLinha 1) (+ indiceColuna 2) 'quadrado-1x1)))
  )
)

